/*
 * Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package javax.crypto.spec;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.security.InvalidAlgorithmParameterException;
import java.security.Key;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Objects;

/**
 * Specifies the set of parameters used by a {@code Cipher} using the
 * Hybrid Public Key Encryption (HPKE) algorithm. HPKE is defined
 * in https://datatracker.ietf.org/doc/rfc9180/.
 * <p>
 * In HPKE, The sender is always initialized with the recipient's public key
 * in encrypt mode, and the recipient is always initialized with its own
 * private key in decrypt mode.
 * <p>
 * An {@code HPKEParameterSpec} object can be provided at initialization.
 * When the object is generated by the {@link #of()} method, the identifiers
 * for the KEM, KDF, and AEAD algorithms used by HPKE will be determined by
 * the type of key provided to the {@code init()} method. When the object
 * is generated by {@link #of(int, int, int)}, the KEM, KDF, and AEAD
 * algorithms are determined by the numeric identifiers provided. The
 * identifiers must not be zero.
 * <p>
 * Any application-supplied information can be provided using the
 * {@link #info(byte[])} method by both parties.
 * <p>
 * If HPKE modes {@code mode_auth} or {@code mode_auth_psk} are used,
 * the KEM keys for authentication must be provided using the
 * {@link #auth(Key)} method. Precisely, the sender must call this method
 * with its own private key and the recipient must call it with the sender's
 * public key.
 * <p>
 * If HPKE modes {@code mode_psk} or {@code mode_auth_psk} are used,
 * the pre-shared key for authentication and its identifier must be provided
 * using the {@link #psk(SecretKey, byte[])} method by both parties.The key
 * and the identifier must not be empty.
 * <p>
 * For successful interoperability, both parties need to supply identical
 * {@code info}, {@code psk}, and {@code psk_id} if provided.
 * <p>
 * In an HPKE cipher, a shared secret is negotiated by the KEM step and a key
 * encapsulation message must be transmitted from the sender to the recipient
 * to recover this shared secret. On the sender side, the key encapsulation
 * message can be retrieved using the {@link Cipher#getIV()} method after the
 * cipher is initialized. There are two ways to provide the key encapsulation
 * message to the recipient at initialization time. The recipient can either
 * create an {@code HPKEParameterSpec} object and call its
 * {@link #encapsulation(byte[])} method to embed the key encapsulation message
 * inside the {@code HPKEParameterSpec} object. Or, it can use an
 * {@link IvParameterSpec} object with the key encapsulation message as its
 * initialization vector. Providing {@code new IvParameterSpec(encap)} is
 * equivalent to providing {@code HPKEParameterSpec.of().encapsulation(encap)}
 * when the recipient cipher is initialized.
 * <p>
 * If the sender cipher is initialized without parameters, it assumes a
 * default parameters object is used, which is equivalent to
 * {@code HPKEParameterSpec.of()}. In this case, the cipher object always
 * work in {@code mode_base} mode with an empty {@code info}. The recipient
 * cipher must be initialized with either an {@code HPKEParameterSpec} object
 * or an {@code IvParameterSpec} object.

 * @implNote
 * In the HPKE implementation in the SunJCE provider included in this JDK
 * implementation, {@code HPKEParameterSpec.of()} chooses the following
 * KEM, KDF, and AEAD algorithms depending on the key used:
 * <ul>
 * <li>For EC key on the secp256r1 curve, the kem_id is 0x10, and the kdf_id is 0x1.
 * <li>For EC key on the secp384r1 curve, the kem_id is 0x11, and the kdf_id is 0x2.
 * <li>For EC key on the secp521r1 curve, the kem_id is 0x12, and the kdf_id is 0x3.
 * <li>For XDH key on the x25519 curve, the kem_id is 0x20, and the kdf_id is 0x1.
 * <li>For XDH key on the x448 curve, the kem_id is 0x21, and the kdf_id is 0x3.
 * </ul>
 * The aead_id is always 0x2. Other keys are not supported.
 * <p>
 * The {@code mode_auth} and {@code mode_auth_psk} modes are not supported yet
 * since authenticated KEM is not supported yet. The {@code export} function
 * of HPKE is not supported yet since {@code Cipher} does not have an export
 * method.
 *
 * @param kem_id identifier for KEM, 0 if determined by key type
 * @param kdf_id identifier for KDF, 0 if determined by key type
 * @param aead_id identifier for AEAD, 0 if determined by key type
 * @param info application-specific info, empty if none
 * @param psk pre-shared key, null if none
 * @param psk_id identifier for PSK, empty if none
 * @param kS key for authentication, null if none
 * @param encapsulation key encapsulation message, null if none
 */
public record HPKEParameterSpec(int kem_id, int kdf_id, int aead_id, byte[] info,
        SecretKey psk, byte[] psk_id, Key kS, byte[] encapsulation)
        implements AlgorithmParameterSpec {

    /**
     * A factory method to create an empty {@code HPKEParameterSpec} in
     * {@code mode_base} mode with an empty {@code info}. The KEM, KDF,
     * and AEAD algorithm identifiers are not specified and will be
     * determined by the key used in cipher initialization.
     *
     * @return a new {@code HPKEParameterSpec} object
     */
    public static HPKEParameterSpec of() {
        return new HPKEParameterSpec(0, 0, 0, new byte[0], null, new byte[0], null, null);
    }

    /**
     * A factory method to create a new {@code HPKEParameterSpec} object with
     * specified KEM, KDF, and AEAD algorithm identifiers in {@code mode_base}
     * mode with an empty {@code info}.
     *
     * @param kem_id identifier for KEM, must not be zero
     * @param kdf_id identifier for KDF, must not be zero
     * @param aead_id identifier for AEAD, must not be zero
     * @return a new {@code HPKEParameterSpec} object
     * @throws InvalidAlgorithmParameterException if any of the provided
     *      identifiers is zero
     */
    public static HPKEParameterSpec of(int kem_id, int kdf_id, int aead_id)
            throws InvalidAlgorithmParameterException {
        if (kem_id < 1 || kem_id > 65535
                || kdf_id < 1 || kdf_id > 65535
                || aead_id < 1 || aead_id > 65535) {
            throw new InvalidAlgorithmParameterException();
        }
        return new HPKEParameterSpec(kem_id, kdf_id, aead_id, new byte[0], null, new byte[0], null, null);
    }

    /**
     * Creates a new {@code HPKEParameterSpec} object with a different
     * {@code info} value.
     *
     * @param info application-specific info. Must not be {@code null}.
     * @return a new {@code HPKEParameterSpec} object
     * @throws NullPointerException if {@code info} is {@code null}
     */
    public HPKEParameterSpec info(byte[] info) {
        return new HPKEParameterSpec(kem_id, kdf_id, aead_id,
                Objects.requireNonNull(info), psk, psk_id, kS, encapsulation);
    }

    /**
     * Creates a new {@code HPKEParameterSpec} object with different
     * {@code psk} value and {@code psk_id} values.
     *
     * @param psk pre-shared key. Set to {@code null} if no pre-shared key is used.
     * @param psk_id identifier for PSK. Set to empty if no pre-shared key is used.
     *               Must not be {@code null}
     * @return a new {@code HPKEParameterSpec} object
     * @throws NullPointerException if {@code psk_id} is {@code null}
     * @throws InvalidAlgorithmParameterException if {@code psk} and {@code psk_id} are
     *      not consistent, i.e. {@code psk} is not {@code null} but
     *      {@code psk_id} is empty, or {@code psk} is {@code null} but
     *      {@code psk_id} is not empty.
     */
    public HPKEParameterSpec psk(SecretKey psk, byte[] psk_id)
            throws InvalidAlgorithmParameterException {
        Objects.requireNonNull(psk_id);
        if (psk == null && psk_id.length != 0
                || psk != null && psk_id.length == 0) {
            throw new InvalidAlgorithmParameterException("psk and psk_id do not match");
        }
        return new HPKEParameterSpec(kem_id, kdf_id, aead_id,
                info, psk, psk_id, kS, encapsulation);
    }

    /**
     * Creates a new {@code HPKEParameterSpec} object with a different
     * key encapsulation message value that will be used by the recipient.
     *
     * @param encapsulation the key encapsulation message. If set to
     *                      {@code null}, the previous key encapsulation
     *                      message is cleared.
     * @return a new {@code HPKEParameterSpec} object
     */
    public HPKEParameterSpec encapsulation(byte[] encapsulation) {
        return new HPKEParameterSpec(kem_id, kdf_id, aead_id,
                info, psk, psk_id, kS, encapsulation);
    }

    /**
     * Creates a new {@code HPKEParameterSpec} object with a different
     * authentication key value.
     *
     * @param kS the authentication key. If set to {@code null}, the previous
     *          authentication key is cleared.
     * @return a new {@code HPKEParameterSpec} object
     */
    public HPKEParameterSpec auth(Key kS) {
        return new HPKEParameterSpec(kem_id, kdf_id, aead_id,
                info, psk, psk_id, kS, encapsulation);
    }
}
